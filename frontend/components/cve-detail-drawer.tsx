'use client'

import { useState, useEffect } from 'react'
import { Drawer, DrawerContent, DrawerHeader, DrawerTitle } from '@/components/ui/drawer'
import { Button } from '@/components/ui/button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Loading } from '@/components/ui/loading'
import { X, Copy, ExternalLink } from 'lucide-react'
import mermaid from 'mermaid'
import { type CVE } from '@/hooks/use-cves'

interface CVEDetailDrawerProps {
  cve: CVE | null
  isOpen: boolean
  onClose: () => void
}

interface CVEExplanation {
  explanation: string
  mermaid: string
}

interface WAFRule {
  waf_rule: string
}

export function CVEDetailDrawer({ cve, isOpen, onClose }: CVEDetailDrawerProps) {
  const [explanation, setExplanation] = useState<CVEExplanation | null>(null)
  const [wafRule, setWafRule] = useState<WAFRule | null>(null)
  const [loading, setLoading] = useState(false)
  const [activeTab, setActiveTab] = useState('general')
  const [selectedWAF, setSelectedWAF] = useState('AWS')
  const [selectedMode, setSelectedMode] = useState('JSON')

  // Initialize Mermaid
  useEffect(() => {
    mermaid.initialize({
      startOnLoad: true,
      theme: 'dark',
      securityLevel: 'loose',
    })
  }, [])

  // Fetch CVE explanation and mermaid when CVE changes
  useEffect(() => {
    if (cve && isOpen) {
      fetchCVEExplanation()
    }
  }, [cve, isOpen])

  // Render mermaid diagram when explanation changes
  useEffect(() => {
    if (explanation?.mermaid) {
      renderMermaidDiagram()
    }
  }, [explanation])

  const fetchCVEExplanation = async () => {
    if (!cve) return

    setLoading(true)
    try {
      const response = await fetch('/api/cve-explanation', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          cve_id: cve.id,
          description: cve.description,
          severity: getSeverityLevel(cve.cvss_v3_score),
        }),
      })

      if (response.ok) {
        const data = await response.json()
        setExplanation(data)
      } else {
        console.error('Failed to fetch CVE explanation')
      }
    } catch (error) {
      console.error('Error fetching CVE explanation:', error)
    } finally {
      setLoading(false)
    }
  }

  const fetchWAFRule = async () => {
    if (!cve) return

    setLoading(true)
    try {
      const response = await fetch('/api/waf-rule', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          cve_id: cve.id,
          description: cve.description,
          severity: getSeverityLevel(cve.cvss_v3_score),
          mode: selectedMode,
          waf: selectedWAF,
        }),
      })

      if (response.ok) {
        const data = await response.json()
        setWafRule(data)
      } else {
        console.error('Failed to fetch WAF rule')
      }
    } catch (error) {
      console.error('Error fetching WAF rule:', error)
    } finally {
      setLoading(false)
    }
  }

  const renderMermaidDiagram = async () => {
    if (!explanation?.mermaid) return

    try {
      const element = document.getElementById('mermaid-diagram')
      if (element) {
        element.innerHTML = ''
        const { svg } = await mermaid.render('mermaid-diagram', explanation.mermaid)
        element.innerHTML = svg
      }
    } catch (error) {
      console.error('Error rendering mermaid diagram:', error)
    }
  }

  const getSeverityLevel = (score: number | null): string => {
    if (score === null) return 'Unknown'
    if (score >= 9.0) return 'Critical'
    if (score >= 7.0) return 'High'
    if (score >= 4.0) return 'Medium'
    return 'Low'
  }

  const getSeverityColor = (score: number | null): string => {
    if (score === null) return 'bg-gray-500'
    if (score >= 9.0) return 'bg-red-500'
    if (score >= 7.0) return 'bg-orange-500'
    if (score >= 4.0) return 'bg-yellow-500'
    return 'bg-green-500'
  }

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text)
      // You could add a toast notification here
    } catch (error) {
      console.error('Failed to copy to clipboard:', error)
    }
  }

  if (!cve) return null

  return (
    <Drawer open={isOpen} onOpenChange={onClose}>
      <DrawerContent className="max-h-[90vh]">
        <DrawerHeader className="border-b">
          <div className="flex items-center justify-between">
            <DrawerTitle className="flex items-center gap-2">
              <span className="font-mono text-lg">{cve.id}</span>
              <Badge 
                variant="secondary" 
                className={`${getSeverityColor(cve.cvss_v3_score)} text-white`}
              >
                {getSeverityLevel(cve.cvss_v3_score)}
              </Badge>
            </DrawerTitle>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="h-4 w-4" />
            </Button>
          </div>
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <span>Threat Feed: {cve.threat_feed}</span>
            <span>•</span>
            <span>Dependency: {cve.dependency_name}</span>
            {cve.cvss_v3_score && (
              <>
                <span>•</span>
                <span>CVSS: {cve.cvss_v3_score}</span>
              </>
            )}
          </div>
        </DrawerHeader>

        <div className="flex-1 overflow-y-auto p-6">
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="general">General</TabsTrigger>
              <TabsTrigger value="remediation">Remediation</TabsTrigger>
            </TabsList>

            <TabsContent value="general" className="space-y-4">
              <div>
                <h3 className="text-lg font-semibold mb-2">Description</h3>
                <p className="text-sm text-muted-foreground leading-relaxed">
                  {cve.description}
                </p>
              </div>

              <Separator />

              <div>
                <h3 className="text-lg font-semibold mb-2">Explanation</h3>
                {loading ? (
                  <Loading message="Generating explanation..." size="sm" />
                ) : explanation ? (
                  <div className="space-y-4">
                    <p className="text-sm leading-relaxed">
                      {explanation.explanation}
                    </p>
                    
                    <div>
                      <h4 className="text-md font-medium mb-2">CVE Flow Diagram</h4>
                      <div 
                        id="mermaid-diagram" 
                        className="bg-muted rounded-lg p-4 overflow-x-auto"
                      />
                    </div>
                  </div>
                ) : (
                  <p className="text-sm text-muted-foreground">
                    No explanation available
                  </p>
                )}
              </div>

              {cve.references && cve.references.length > 0 && (
                <>
                  <Separator />
                  <div>
                    <h3 className="text-lg font-semibold mb-2">References</h3>
                    <div className="space-y-2">
                      {cve.references.map((ref, index) => (
                        <div key={index} className="flex items-center gap-2">
                          <ExternalLink className="h-3 w-3 text-muted-foreground" />
                          <a 
                            href={ref} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="text-sm text-blue-500 hover:underline"
                          >
                            {ref}
                          </a>
                        </div>
                      ))}
                    </div>
                  </div>
                </>
              )}
            </TabsContent>

            <TabsContent value="remediation" className="space-y-4">
              <div>
                <h3 className="text-lg font-semibold mb-4">WAF Rule Generation</h3>
                
                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div>
                    <label className="text-sm font-medium">WAF Provider</label>
                    <select 
                      value={selectedWAF} 
                      onChange={(e) => setSelectedWAF(e.target.value)}
                      className="w-full mt-1 p-2 border rounded-md bg-background"
                    >
                      <option value="AWS">AWS WAF</option>
                      <option value="Azure">Azure WAF</option>
                      <option value="GCP">GCP WAF</option>
                      <option value="Cloudflare">Cloudflare</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium">Output Format</label>
                    <select 
                      value={selectedMode} 
                      onChange={(e) => setSelectedMode(e.target.value)}
                      className="w-full mt-1 p-2 border rounded-md bg-background"
                    >
                      <option value="JSON">JSON</option>
                      <option value="cURL">cURL</option>
                    </select>
                  </div>
                </div>

                <Button 
                  onClick={fetchWAFRule} 
                  disabled={loading}
                  className="w-full"
                >
                  {loading ? 'Generating...' : 'Generate WAF Rule'}
                </Button>

                {wafRule && (
                  <div className="mt-4">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="text-md font-medium">Generated WAF Rule</h4>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => copyToClipboard(wafRule.waf_rule)}
                      >
                        <Copy className="h-4 w-4 mr-2" />
                        Copy
                      </Button>
                    </div>
                    <pre className="bg-muted p-4 rounded-lg text-sm overflow-x-auto">
                      <code>{wafRule.waf_rule}</code>
                    </pre>
                  </div>
                )}
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </DrawerContent>
    </Drawer>
  )
}
